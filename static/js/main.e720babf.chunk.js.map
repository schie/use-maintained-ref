{"version":3,"sources":["App.js","../../../src/index.ts","index.js"],"names":["RandoButton","onSomeEvent","text","useState","value","setValue","onSomeEventRef","useMaintainedRef","toggle","useCallback","a","useEffect","current","event","onClick","on","toString","App","setText","intervalID","setInterval","Date","toLocaleTimeString","clearInterval","eventData","setEventData","JSON","stringify","ReactDOM","render","document","getElementById"],"mappings":"qPAIA,IAAMA,EAAc,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KAAW,EACnBC,oBAAS,GADU,mBACtCC,EADsC,KAC/BC,EAD+B,KAEvCC,ECJF,SAAoC,GACtC,IAAI,EAAM,iBAAO,GAMnB,OAJE,OAAF,YAAE,EAAQ,WACR,EAAI,QAAU,IACb,CAAC,IAEG,EDHgBC,CAAiBN,GAElCO,EAASC,sBAAW,sBAAC,sBAAAC,EAAA,sDACzBL,GAAUD,GADe,2CAExB,CAACF,EAAME,IAYV,OATAO,qBAAU,WACRL,EAAeM,QAAQ,CAAEC,MAAO,gBAAiBT,YAChD,CAACA,IAGJO,qBAAU,WACRL,EAAeM,QAAQ,CAAEC,MAAO,cAAeT,MAAOF,MACrD,CAACA,IAGF,4BAAQY,QAASN,EAAQO,IAAE,GACxBb,EADH,MACYE,EAAMY,aA2BPC,EAtBH,WAAO,IAAD,EACQd,mBAAS,QADjB,mBACTD,EADS,KACHgB,EADG,KAGhBP,qBAAU,WACR,IAAMQ,EAAaC,aAAY,WAC7BF,GAAQ,IAAIG,MAAOC,wBAClB,CAAC,MAEJ,OAAO,WACLC,cAAcJ,MAEf,IAXa,MAakBhB,mBAAS,MAb3B,mBAaTqB,EAbS,KAaEC,EAbF,KAehB,OACE,6BACE,kBAAC,EAAD,CAAavB,KAAMA,EAAMD,YAAa,SAACuB,GAAD,OAAeC,EAAaD,MAClE,6BAAME,KAAKC,UAAUH,EAAW,KAAM,MEzC5CI,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.e720babf.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\n\nimport { useMaintainedRef } from 'use-maintained-ref';\n\nconst RandoButton = ({ onSomeEvent, text }) => {\n  const [value, setValue] = useState(false);\n  const onSomeEventRef = useMaintainedRef(onSomeEvent);\n\n  const toggle = useCallback(async () => {\n    setValue(!value);\n  }, [text, value]);\n\n  // will call the `onSomeEvent` function prop, but won't be triggered by it\n  useEffect(() => {\n    onSomeEventRef.current({ event: 'toggleChanged', value });\n  }, [value]);\n\n  // will call the `onSomeEvent` function prop, but won't be triggered by it\n  useEffect(() => {\n    onSomeEventRef.current({ event: 'textChanged', value: text });\n  }, [text]);\n\n  return (\n    <button onClick={toggle} on>\n      {text} - {value.toString()}\n    </button>\n  );\n};\n\nconst App = () => {\n  const [text, setText] = useState('test');\n\n  useEffect(() => {\n    const intervalID = setInterval(() => {\n      setText(new Date().toLocaleTimeString());\n    }, [1000]);\n\n    return () => {\n      clearInterval(intervalID);\n    };\n  }, []);\n\n  const [eventData, setEventData] = useState(null);\n\n  return (\n    <div>\n      <RandoButton text={text} onSomeEvent={(eventData) => setEventData(eventData)} />\n      <pre>{JSON.stringify(eventData, null, 2)}</pre>\n    </div>\n  );\n};\nexport default App;\n","import { useRef, useEffect } from 'react';\nexport function useMaintainedRef(maintainedThing) {\n    const ref = useRef(maintainedThing);\n    useEffect(() => {\n        ref.current = maintainedThing;\n    }, [maintainedThing]);\n    return ref;\n}\n//# sourceMappingURL=index.js.map","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}